#version 460

#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_buffer_reference2 : require

#include "lop/color.glsl"
#include "lop/environment.glsl"
#include "lop/image.glsl"
#include "lop/material.glsl"
#include "lop/object.glsl"
#include "lop/random.glsl"
#include "lop/ray.glsl"
#include "lop/vertex.glsl"

layout(binding = 0, set = 0)          uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D accumulation;
layout(binding = 2, set = 0, rgba8)   uniform image2D image;
layout(binding = 3, set = 0)          uniform PtProperties 
{
	mat4 view;
	mat4 projection;
	uint sampleId;
	uint maxSample;
	uint transparentBackground;
	uint jittering;
} properties;
layout(binding = 6, set = 0) uniform sampler2D environment;
layout(binding = 7, set = 0) uniform sampler2D environmentSampling;

layout(location = 0) rayPayloadEXT HitInfo prd;

void main() 
{
	uvec4 u = uvec4( gl_LaunchIDEXT.x, gl_LaunchIDEXT.y, properties.sampleId, 0 );

	vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
	if(properties.jittering != 0) 
		pixelCenter += .5 * prng(u).xy;
	
	const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
	const vec2 uv          = inUV * 2.0 - 1.0;

	vec3  finalColor   = vec3(0.);
	float alpha        = 1.;
	bool  computeImage = properties.maxSample == 0 || properties.sampleId < properties.maxSample;
	if( computeImage ) 
	{
		// Based on https://github.com/boksajak/referencePT/blob/master/shaders/PathTracer.hlsl#L525
		float aspect	  = properties.projection[1].y / properties.projection[0].x;
		float tanHalfFovY = 1. / properties.projection[1].y;
	
		vec3 rd = normalize((uv.x * properties.view[0].xyz * tanHalfFovY * aspect )
						  + (uv.y * properties.view[1].xyz * tanHalfFovY - properties.view[2].xyz ));
		vec3 ro = properties.view[3].xyz;

		const float tmin   = 0.001;
		const float tmax   = 10000.0;
		const uint bounces = 16;

		vec3 throughput      = vec3(1.);
		bool lastTransmitted = false;
		for( uint i = 0; i < bounces; i++ )
		{
			traceRayEXT(topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, ro, tmin, rd, tmax, 0);
			if( !prd.hit && i == 0 )
			{
				if(properties.transparentBackground != 0)
					alpha = 0.;

				finalColor += throughput * getEnvironment(environment, rd);
				break;
			}
			else if(!prd.hit && lastTransmitted)
			{
				finalColor += throughput * getEnvironment(environment, rd);
				break;
			}
			else if (!prd.hit) 
			{
				break;
			}
		
			vec3  p	 = ro + rd * prd.t;
			vec3  wo = -rd;
			vec3  n	 = prd.shadingNormal;
			vec3  pp = offsetRay( p, n * sign( dot( wo, n ) ) );

			const float orientation    = sign( dot( wo, n ) );
			const vec4  transformation = toLocalZ( n * orientation );
			const vec3  nLocal         = vec3( 0., 0., 1. );
			const vec3  woLocal        = normalize( multiply( transformation, wo ) );

			Material material = prd.material;
			{
				vec3 direct = vec3( 0. );
			
				// Sampling light
				{
					float lightPdf;
					vec3  wi	   = sampleEnvironment( environmentSampling, prng( u ).xy, lightPdf );
					vec3  wiLocal  = normalize( multiply( transformation, wi ) );
					float cosTheta = abs(wiLocal.z);
				
					if( lightPdf > 0. ) 
					{
						traceRayEXT( topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, pp, tmin, wi, tmax, 0 );
						if( !prd.hit ) 
						{
							const vec3 intensity = getEnvironment( environment, wi ) * 1.5;
							const vec3 bsdf      = evalMaterial( material, wi, wo ) * cosTheta;
				
							const float scatteringPdf = getPdfMaterial( material, woLocal, wiLocal, u ); 
							const float weight		  = powerHeuristic( 1, lightPdf, 1, scatteringPdf );
				
							direct += min(intensity, bsdf * intensity * weight / max(1e-4, lightPdf));
						}
					}
				}

				// Sampling BRDF
				{
					float scatteringPdf = 0.;
					vec3  bsdf          = vec3(0.);
					vec3  wiLocal       = sampleMaterial( material, woLocal, u, bsdf, scatteringPdf );
					float cosTheta      = abs(wiLocal.z);

					if( scatteringPdf > 0. ) 
					{
						const vec3 wi = normalize( multiply( conjugate( transformation ), wiLocal ) );

						traceRayEXT( topLevelAS, gl_RayFlagsOpaqueEXT, 0xff, 0, 0, 0, pp, tmin, wi, tmax, 0 );
						if( !prd.hit )
						{
							bsdf                *= cosTheta;
							const vec3 intensity = getEnvironment( environment, wi ) * 1.5;

							const float lightPdf = getPdfEnvironment( environmentSampling, wi ); 
							const float weight   = powerHeuristic( 1, scatteringPdf, 1, lightPdf );

							direct += min(intensity, bsdf * intensity * weight / max(1e-4, scatteringPdf));
						}
					}
				}

				finalColor += throughput * direct;
			}
		
			float pdf     = 0.;
			vec3  bsdf    = vec3(0.);
			vec3  wiLocal = sampleMaterial( material, woLocal, u, bsdf, pdf );
			if( !any( greaterThan( bsdf, vec3( 0. ) ) ) || pdf == 0.)
				break;

			float cosTheta = abs( woLocal.z );
			throughput    *= min(vec3(1.), bsdf * cosTheta / pdf);
			
			float luminance = getLuminance(throughput);
			if(luminance == 0.)
				break;

			// Russian Roulette
			// Crash course in BRDF implementation
			float rr = min(luminance, .95f);
			// https://computergraphics.stackexchange.com/a/2325
			// float rr = max(throughput.x, max(throughput.y, throughput.z));
			if (prng(u).x > rr)
				break;
			throughput *= 1. / rr;

			lastTransmitted = dot(wiLocal, nLocal) < 0.;

			rd = multiply(conjugate(transformation), wiLocal);
			ro = offsetRay(p, n * sign(dot(n, rd)));
		}
	}
	else 
	{
		finalColor = imageLoad( accumulation, ivec2(gl_LaunchIDEXT.xy) ).rgb;
	}

    vec4 accumulatedColor = vec4( finalColor, alpha );
	if ( computeImage ) 
	{
		if ( properties.sampleId > 0 )
		{
			const float weight                   = 1. / float( properties.sampleId + 1 );
			const vec4  previousAccumulatedColor = imageLoad( accumulation, ivec2(gl_LaunchIDEXT.xy) );
			accumulatedColor                     = mix( previousAccumulatedColor, accumulatedColor, weight );
		}

		imageStore(accumulation, ivec2(gl_LaunchIDEXT.xy), accumulatedColor);
	}

	imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(tonemapACES(accumulatedColor.rgb), accumulatedColor.w));
}
